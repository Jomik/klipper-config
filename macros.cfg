[include test_speed.cfg]
[include ./z_tramming/z_tramming.cfg]
[include overrides.cfg]

## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 225   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 235   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 3.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 150.0 # move speed in mm/s
#variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : 225  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : 235  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_use_fw_retract   : True # use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
gcode:

[gcode_macro _Z_TRAMMING_SETTINGS]
variable_screw_lead: 4
variable_y_position: 131
gcode:

[gcode_macro PRINT_START]
gcode:
  {% if 'BED_TEMP' not in params %}
    {action_raise_error("BED_TEMP not set in PRINT_START macro")}
  {% endif %}
  {% if 'EXTRUDER_TEMP' not in params %}
    {action_raise_error("EXTRUDER_TEMP not set in PRINT_START macro")}
  {% endif %}

  {% set BED_TEMP = params.BED_TEMP|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}

# Use absolute coordinates
  G90
# Home the printer
  G28

# Wait for bed to reach temperature
  M190 S{BED_TEMP}

  BED_MESH_CALIBRATE ADAPTIVE=1

  SMART_PARK

# Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}

  SKEW_PROFILE LOAD=default
  PURGE

# Credit to https://www.reddit.com/r/klippers/comments/yoq23n/end_print_macro_gradually_cooldown_to_prevent/
[delayed_gcode gradual_cooldown]
gcode:
  {% set threshold = 40 %}
  {% set minutes = 5 %}
  {% set step = 5 %}
  {% if printer.heater_bed.target > threshold %}
    M140 S{printer.heater_bed.target - step}
    UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION={minutes * 60}
  {% else %}
    M140 S0
  {% endif %}

[gcode_macro PRINT_END]
gcode:
    SET_SKEW CLEAR=1
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300

    # Turn off extruder
    M104 S0

    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    G1 X225 Y235 F2000

    # Disable steppers
    M84

    BED_MESH_CLEAR

    {% if printer.heater_bed.temperature > 80 %}
      {action_respond_info("Starting gradual bed cooling...")}
      UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=1
    {% else %}
 # Turn off bed
      M140 S0
    {% endif %}

[gcode_macro M600]
description: Filament change
gcode:
    PAUSE X=50 Y=3 Z_MIN=50 RESTORE=0

[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method(
    "set_device_power", device="printer", state="off"
  )}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    {action_respond_info("Powering off printer...")}
    POWER_OFF_PRINTER
  {% else %}
    {action_respond_info("Printer not idle, power off aborted")}
  {% endif %}

[idle_timeout]
timeout: 600
gcode:
  {% if printer.pause_resume.is_paused %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=True
    {action_respond_info("Idle Timeout: Extruder powered down")}
    M104 S0   ; Set Hot-end to 0C (off)
  {% else %}
    {action_respond_info("Idle Timeout: Stepper and Heater powered down, printer power down in 60 seconds")}
    TURN_OFF_HEATERS
    M84
    UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60
  {% endif %}

# Inspired by https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging/blob/d657271f13fc429b5ca36a4f8956b67c9ddf0558/Configuration/Smart_Park.cfg
[gcode_macro SMART_PARK]
description: Parks your printhead near the print area for pre-print hotend heating.
gcode:
    {% set purge_settings = printer["gcode_macro PURGE"] %}
    {% set z_height = 10 %}
    {% set purge_margin = purge_settings.purge_margin | float %} # Set purge margin variable
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %} # Create center point of x for fallback
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %} # Create center point of y for fallback
    {% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
    {% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %} # Gather all object points
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %} # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %} # Set y_min from smallest object y point
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %} # Set travel speed from config

    {% if purge_margin > 0 and x_min != center_x and y_min != center_y %} # If objects are detected and purge margin 
        {% set x_min = [ x_min - purge_margin , x_min ] | min %} # value is greater than 0, move
        {% set y_min = [ y_min - purge_margin , y_min ] | min %} # to purge location + margin
        {% set x_min = [ x_min , axis_minimum_x ] | max %}
        {% set y_min = [ y_min , axis_minimum_y ] | max %}
    {% endif %}

    { action_respond_info("Smart Park location: {},{}.".format(
        (x_min),
        (y_min),
    )) }
    
    SAVE_GCODE_STATE NAME=Presmartpark_State # Create gcode state

    G90 # Absolute positioning
    {% if printer.toolhead.position.z < z_height %}
        G0 Z{z_height} # Move Z to park height if current Z position is lower than z_height
    {% endif %}
    G0 X{x_min} Y{y_min} F{travel_speed} # Move near object area
    G0 Z{z_height} # Move Z to park height 

    RESTORE_GCODE_STATE NAME=Presmartpark_State # Restore gcode state

# Inspired by https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging/blob/d657271f13fc429b5ca36a4f8956b67c9ddf0558/Configuration/Line_Purge.cfg
[gcode_macro PURGE]
description: A purge macro that adapts to be near your actual printed objects
variable_tip_distance: 3
variable_flow_rate: 8
variable_purge_height: 0.8
variable_purge_margin: 11
variable_purge_amount: 20
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %} # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %} # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %} # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %} # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %} # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %} # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %} # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %} # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %} # Add margin to y min, compare to 0, and choose the larger

    {% if cross_section < 5 %}
        # Abort
        {action_raise_error("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
    {% endif %}

    SAVE_GCODE_STATE NAME=Prepurge_State # Create gcode state

    {% if purge_y_origin > 0 %} # If there's room on Y, purge along X axis in front of print area
        G92 E0 # Reset extruder
        G0 F{travel_speed} # Set travel speed
        G90 # Absolute positioning
        G0 X{purge_x_center} Y{purge_y_origin} # Move to purge position
        G0 Z{purge_height} # Move to purge Z height
        M83 # Relative extrusion mode
        G1 E{tip_distance} F{purge_move_speed} # Move filament tip
        G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed} # Purge line
        {RETRACT} # Retract
        G0 X{purge_x_center + purge_amount + 10} F{travel_speed} # Rapid move to break string
        G92 E0 # Reset extruder distance
        M82 # Absolute extrusion mode
        G0 Z{purge_height * 2} F{travel_speed} # Z hop
    {% else %} # If there's room on X, purge along Y axis to the left of print area
        G92 E0 # Reset extruder
        G0 F{travel_speed} # Set travel speed
        G90 # Absolute positioning
        G0 X{purge_x_origin} Y{purge_y_center} # Move to purge position
        G0 Z{purge_height} # Move to purge Z height
        M83 # Relative extrusion mode
        G1 E{tip_distance} F{purge_move_speed} # Move filament tip
        G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed} # Purge line
        {RETRACT} # Retract
        G0 Y{purge_y_center + purge_amount + 10} F{travel_speed} # Rapid move to break string
        G92 E0 # Reset extruder distance
        M82 # Absolute extrusion mode
        G0 Z{purge_height * 2} F{travel_speed} # Z hop
    {% endif %}

    RESTORE_GCODE_STATE NAME=Prepurge_State # Restore gcode state

[gcode_macro LIFT_Z]
description: Forcefully lifts the Z axis by a specified amount
gcode:
  {% set distance = params.DISTANCE|default(5)|float %}
  {% set velocity = params.VELOCITY|default(2)|float %}

  {% if 'z' in printer.toolhead.homed_axes %}
    G0 Z{printer.toolhead.position.z + distance} F{velocity}
  {% else %}
    FORCE_MOVE STEPPER=stepper_z DISTANCE={distance} VELOCITY={velocity}
  {% endif %}
